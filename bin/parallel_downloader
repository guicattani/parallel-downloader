#!/usr/bin/env ruby
# frozen_string_literal: true
require "parallel_downloader"
require "optparse"

Dir["./lib/**/*.rb"].each { |file| require file }

options = {}
OptionParser.new do |opts|

  opts.banner = "Usage: parallel_downloader [filename] [options]"

  opts.separator ""
  opts.separator "Specific options:"

  opts.on("-s", "--separator [SEPARATOR]", String, "Separator in given file") do |s|
    options[:separator] = s
  end

  opts.on("-n", "--number-of-processes [NUM]", Integer, "Number of Parallel Processes") do |p|
    options[:number_of_processes] = p
  end

  opts.on("-f", "--force", "Override extension allow list and download files with no extension") do
    options[:forceful] = true
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

end.parse!(ARGV)

begin
  logger = File.new("downloader.log", "a")
  startTime = Time.now

  raise ParallelDownloader::Errors::InsufficientArguments if ARGV[0].nil?
  file_name = ARGV[0]

  downloader = ParallelDownloader.new(file_name, logger, options)
  downloader.exec

  puts "Done!"

  rescue ParallelDownloader::Errors::FileExtensionNotImplemented => e
    match = ARGV[0].match(/\.(.*)/)
    if match != nil
      puts "Extension not implemented for #{match[1]}"
    else
      puts "Extension not implemented for unknown extension"
    end

  rescue ParallelDownloader::Errors::EmptyFile => e
    puts "ERROR: Given file is empty! Aborting!"
  rescue ParallelDownloader::Errors::FileNotFound => e
    puts "ERROR: File was not found! Aborting!"
  rescue ParallelDownloader::Errors::UnreadableFile => e
    puts "ERROR: Given file is unreadable/corrupted! Aborting!"
  rescue ParallelDownloader::Errors::InsufficientArguments => e
    puts "ERROR: Insufficient arguments. Aborting!"
  rescue RuntimeError => e
    puts "ERROR: Unknown error: #{e}. Aborting!"
  ensure
    if logger != nil
      logger.write("END: Downloading session ended at #{Time.now} \n")
      logger.write("END: Took #{Time.now - startTime} seconds \n")
      logger.close
    end
end
